generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  role          String          @default("user")
  phone         String?
  address       Json?
  emailVerified Boolean
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  banned        Boolean?
  banReason     String?
  banExpires    Int?
  note          String?
  sessions      sessions[]
  accounts      accounts[]
  CalendarEvent CalendarEvent[]

  // Commerce
  cart    Cart?
  orders  Order[]
  reviews Review[]
}

model sessions {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model CalendarEvent {
  id            String   @id @default(cuid())
  googleEventId String   @unique
  calendarId    String
  title         String
  description   String?
  start         DateTime
  end           DateTime
  location      String?
  creator       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User    @relation(fields: [userId], references: [id])
}

model accounts {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
}

model verifications {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

// ---------- Catalog (small) ----------
model Book {
  id         String      @id @default(cuid())
  title      String
  slug       String      @unique
  cartItems  CartItem[]
  isbn       String? @unique
  price      Decimal @db.Decimal(10, 2)
  stock      Int     @default(0)
  coverImage String?
  active     Boolean @default(true)

  // relations
  authors    BookAuthor[]
  categories BookCategory[]
  reviews    Review[]
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([title])
}

model Author {
  id        String       @id @default(cuid())
  name      String
  books     BookAuthor[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([name])
}

model Category {
  id        String         @id @default(cuid())
  name      String         @unique
  books     BookCategory[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model BookAuthor {
  bookId   String
  authorId String

  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  author Author @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@id([bookId, authorId])
  @@index([authorId])
}

model BookCategory {
  bookId     String
  categoryId String

  book     Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([bookId, categoryId])
  @@index([categoryId])
}

// ---------- Cart ----------
model Cart {
  id       String     @id @default(cuid())
  userId   String?    @unique
  currency String     @default("BDT")
  items    CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  bookId    String
  quantity  Int     @default(1)
  unitPrice Decimal @db.Decimal(10, 2) // snapshot

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Restrict)

  @@unique([cartId, bookId])
}

// ---------- Orders (compact) ----------
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  userId      String?
  status      String @default("PENDING")

  subtotal Decimal @default(0) @db.Decimal(10, 2)
  shipping Decimal @default(0) @db.Decimal(10, 2)
  discount Decimal @default(0) @db.Decimal(10, 2)
  total    Decimal @default(0) @db.Decimal(10, 2)
  currency String  @default("BDT")

  // very simple address snapshots
  shippingAddress String
  billingAddress  String?

  items OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  bookId    String
  title     String // snapshot
  sku       String? // optional snapshot
  unitPrice Decimal @db.Decimal(10, 2)
  quantity  Int     @default(1)
  subtotal  Decimal @db.Decimal(10, 2)

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  book  Book  @relation(fields: [bookId], references: [id], onDelete: Restrict)

  @@index([bookId])
}

// ---------- Social ----------
model Review {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  rating    Int // 1..5
  content   String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@index([bookId])
}
